Project:
Team 12 - MI6 Pseudocode

Include headers
Make #defines
Declare module functions and variables

InitUart
	InitUART1
	InitUART2
	
InitUART1
	Enable the clock to the UART module using RCGCUART register
	Enable the clock to the appropriate GPIO module RCGCGPIO
	Wait for the UART to be ready PRUART
	Wait for the GPIO module to be ready
	Configure GPIO pins for in/out/drive-level/drivetype
	Select the alternate function for the UART pins (AFSEL)
	Configure the PMCn fields in the GPIOPCTL register to assign the UART pins
	Disable the UART by clearing the UARTEN bit in the UARTCTL register
	Write the integer portion of the BRD to the UARTIBRD register
	Write the fractional portion of the BRD to the UARTBRD register
	Write the desired serial parameters to the UARTLCRH register
	Configure the UART operation using the UARTCTL register
	Locally enable interrupts for the UART receive interruypt mask (RXIM in UARTIM)
	Enable UART1 interrupt vector in NVIC (Bit 6 in NVIC_EN0) (Tiva p.104 for vector table)
	Enable the UART by setting the UARTEN bit in the UARTCTL register
	
InitUART2
	Enable the clock to the UART module using RCGCUART register
	Enable the clock to the appropriate GPIO module RCGCGPIO
	Wait for the UART to be ready PRUART
	Wait for the GPIO module to be ready
	Configure GPIO pins for in/out/drive-level/drivetype
	Select the alternate function for the UART pins (AFSEL)
	Configure the PMCn fields in the GPIOPCTL register to assign the UART pins
	Disable the UART by clearing the UARTEN bit in the UARTCTL register
	Write the integer portion of the BRD to the UARTIBRD register
	Write the fractional portion of the BRD to the UARTBRD register
	Write the desired serial parameters to the UARTLCRH register
	Configure the UART operation using the UARTCTL register
	Locally enable interrupts for the UART receive interruypt mask (RXIM in UARTIM)
	Enable UART1 interrupt vector in NVIC (Bit 6 in NVIC_EN0) (Tiva p.104 for vector table)
	Enable the UART by setting the UARTEN bit in the UARTCTL register